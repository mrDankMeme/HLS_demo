//
//  HLSSegmentPrefetcher.swift
//  HLSDemo2
//
//  Updated by Niiaz Khasanov on 10/18/25
//

import Foundation

/// –ü—Ä–µ—Ñ–µ—Ç—á–∏—Ç N —Å–µ–∫—É–Ω–¥: –±–µ—Ä—ë–º –Ω–∏–∑–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç –≤ –º–∞—Å—Ç–µ—Ä–µ, —Å–∫–∞—á–∏–≤–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.
/// –î—Ä—É–∂–µ–ª—é–±–µ–Ω –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é: –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–∞—É–∑–∞ –ø—Ä–∏ –±—É—Ñ–µ—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.
final class HLSSegmentPrefetcher {
    static let shared = HLSSegmentPrefetcher()

    private let store = HLSSegmentStore.shared

    // –°–µ—Ç–µ–≤–æ–π —Å—Ç–µ–∫
    private let q   = DispatchQueue(label: "hls.prefetcher", qos: .utility)
    private let sem = DispatchSemaphore(value: 1) // –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
    private let session: URLSession

    // –£—á—ë—Ç —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–¥–ª—è cancelAll)
    private var tasks: [URL: URLSessionDataTask] = [:]
    private var suspended = false

    private init() {
        let cfg = URLSessionConfiguration.ephemeral  // –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –∫–µ—à–∞, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å
        cfg.httpMaximumConnectionsPerHost = 1        // –Ω–µ –º–µ—à–∞–µ–º –ø–ª–µ–µ—Ä—É
        cfg.waitsForConnectivity = true
        cfg.timeoutIntervalForRequest  = 20
        cfg.timeoutIntervalForResource = 60
        cfg.httpAdditionalHeaders = [
            "User-Agent": "HLSDemo2/1.0 (iOS)",
            "Accept": "application/vnd.apple.mpegurl, application/x-mpegURL, */*"
        ]
        session = URLSession(configuration: cfg)
    }

    // MARK: Controls

    func suspend() {
        q.async {
            guard !self.suspended else { return }
            self.suspended = true
            self.tasks.values.forEach { $0.suspend() }
            print("‚è∏ prefetch SUSPEND")
        }
    }

    func resume() {
        q.async {
            guard self.suspended else { return }
            self.suspended = false
            self.tasks.values.forEach { $0.resume() }
            print("‚ñ∂Ô∏è prefetch RESUME")
        }
    }

    /// –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–µ—Ñ–µ—Ç—á–∏ (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ).
    func cancelAll() {
        q.async {
            self.tasks.values.forEach { $0.cancel() }
            self.tasks.removeAll()
            print("‚õîÔ∏è prefetch CANCEL ALL")
        }
    }

    /// –ü—Ä–µ—Ñ–µ—Ç—á–∏–º –ø–µ—Ä–≤—ã–µ seconds —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.7s), —á—Ç–æ–±—ã –ø–ª–µ–µ—Ä —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç.
    func prefetchFirstSeconds(from playlistURL: URL, seconds: Double, delay: TimeInterval = 0.7) {
        q.asyncAfter(deadline: .now() + delay) { [weak self] in
            guard let self else { return }
            if self.suspended { return } // –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ–º, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–∞—É–∑–∞
            self.sem.wait()
            self.fetchWithRetry(url: playlistURL, retries: 2) { [weak self] data in
                guard let self else { return }
                defer { self.sem.signal() }

                guard let data else { return }
                let (kind, segments, variants) = HLSPlaylistParser.parse(baseURL: playlistURL, data: data)

                switch kind {
                case .master:
                    guard let best = variants.min(by: { $0.bandwidth < $1.bandwidth }) else { return }
                    print("üéõ master -> pick LOWEST bitrate: \(best.bandwidth == .max ? -1 : best.bandwidth) ‚Üí \(best.url.lastPathComponent)")
                    self.prefetchFirstSeconds(from: best.url, seconds: seconds, delay: 0)

                case .media:
                    var sum = 0.0
                    for seg in segments {
                        if sum >= seconds || self.suspended { break }
                        if !self.store.has(seg.url) {
                            self.fetchWithRetry(url: seg.url, retries: 2) { [weak self] data in
                                guard let self, let data else { return }
                                self.store.write(data, for: seg.url)
                                print("‚¨áÔ∏è cached segment: \(seg.url.lastPathComponent) (\(Int(seg.duration))s)")
                            }
                        } else {
                            print("‚úÖ segment hit (already cached): \(seg.url.lastPathComponent)")
                        }
                        sum += seg.duration
                    }
                }
            }
        }
    }

    // MARK: - Networking with retry

    private func fetchWithRetry(url: URL, retries: Int, completion: @escaping (Data?) -> Void) {
        var attempt = 0

        func run() {
            var req  = URLRequest(url: url)
            req.allowsExpensiveNetworkAccess = true
            req.networkServiceType = .background  // iOS —Å—Ç–∞—Ä–∞–µ—Ç—Å—è –Ω–µ –º–µ—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—É
            let task = session.dataTask(with: req) { [weak self] data, _, err in
                // —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –∑–∞–¥–∞—á–µ
                self?.q.async { self?.tasks.removeValue(forKey: url) }

                if let err = err as? URLError, err.code == .timedOut, attempt < retries {
                    attempt += 1
                    let backoff = pow(2.0, Double(attempt)) // 2s, 4s...
                    print("üîÅ retry \(attempt) for \(url.lastPathComponent) in \(Int(backoff))s (timeout)")
                    guard let strongSelf = self else { return }
                    strongSelf.q.asyncAfter(deadline: .now() + backoff) { run() }
                    return
                }

                if let err = err {
                    print("‚ùå fetch error \(url.lastPathComponent): \(err.localizedDescription)")
                }
                completion(data)
            }

            task.priority = URLSessionTask.lowPriority    // —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            q.async { [weak self] in self?.tasks[url] = task }
            if suspended { task.suspend() }
            task.resume()
        }

        run()
    }
}
