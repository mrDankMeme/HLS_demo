//
//  HLSDownloadManager.swift
//  HLSDemo2
//
//  Updated by Niiaz Khasanov on 10/18/25
//

import Foundation
import AVFoundation

protocol HLSDownloadManaging: AnyObject {
    /// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –¥–∏—Å–∫ –Ω–µ –º–µ–Ω–µ–µ targetSeconds —Å–µ–∫—É–Ω–¥; –µ—Å–ª–∏ —Ä–æ–ª–∏–∫ –∫–æ—Ä–æ—á–µ ‚Äî –º–µ–Ω—å—à–µ.
    func prefetch(videoID: Int, url: URL, targetSeconds: Double)
    /// –í–µ—Ä–Ω—É—Ç—å AVURLAsset, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ —á–∏—Ç–∞–µ—Ç –∏–∑ –æ—Ñ—Ñ–ª–∞–π–Ω-–∫–µ—à–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å).
    func localAsset(for url: URL) -> AVURLAsset
    /// –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ —Ä–µ–∞–ª—å–Ω–æ –ª–µ–∂–∏—Ç –Ω–∞ –¥–∏—Å–∫–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ (best-effort).
    func prefetchedSeconds(for videoID: Int) -> Double
    /// –°–ø–∏—Å–æ–∫ videoID, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –æ—Ñ—Ñ–ª–∞–π–Ω-—Å–µ–≥–º–µ–Ω—Ç—ã (>0 —Å–µ–∫).
    func cachedVideoIDs() -> [Int]
    /// –°–Ω–∏–º–æ–∫ –∫—ç—à–∞: [videoID: seconds].
    func cachedSummary() -> [Int: Double]
    /// –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–∫–µ—à–∏—Ä—É–µ–º–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–≤–µ—Ä/—Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ñ—Ñ–ª–∞–π–Ω).
    func isNotCacheable(videoID: Int) -> Bool
}

final class HLSDownloadManager: NSObject, HLSDownloadManaging {
    static let shared = HLSDownloadManager()

    // MARK: Controls
    private let maxConcurrentDownloads = 10
    private let gate = DispatchSemaphore(value: 10)
    private let syncQ = DispatchQueue(label: "hls.download.manager.sync")

    // MARK: URLSession
    private lazy var configuration: URLSessionConfiguration = {
        let cfg = URLSessionConfiguration.background(withIdentifier: "ru.interesno.hlscache")
        cfg.allowsExpensiveNetworkAccess = true
        cfg.allowsConstrainedNetworkAccess = true
        return cfg
    }()

    private lazy var session: AVAssetDownloadURLSession = {
        AVAssetDownloadURLSession(configuration: configuration,
                                  assetDownloadDelegate: self,
                                  delegateQueue: OperationQueue())
    }()

    // MARK: State
    private var tasksByVideoID: [Int: AVAssetDownloadTask] = [:]
    private var targetsByTask: [Int: Double] = [:] // taskIdentifier ‚Üí seconds
    private var prefetchedByVideoID: [Int: Double] = [:] // videoID ‚Üí seconds
    private var lruOrder: [Int] = [] // LRU –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    private var notCacheableIDs: Set<Int> = [] // —Å—é–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç id —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏

    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Å–µ–≥–º–µ–Ω—Ç—ã)
    private var defaultHeaders: [String: String] = [
        "User-Agent": "HLSDemo2/1.0 (iOS)",
        "Accept": "application/vnd.apple.mpegurl, application/x-mpegURL, */*"
    ]
    // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∫—É–∫–∏/–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Äî –¥–æ–±–∞–≤—å –∑–¥–µ—Å—å –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π setter:
    func setAuthHeaders(_ headers: [String: String]) {
        syncQ.async { [headers] in
            for (k, v) in headers { self.defaultHeaders[k] = v }
        }
    }

    // MARK: Public API

    func prefetch(videoID: Int, url: URL, targetSeconds: Double) {
        syncQ.async {
            if self.notCacheableIDs.contains(videoID) {
                // –±–æ–ª—å—à–µ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è ‚Äî —Ñ–æ—Ä–º–∞—Ç/—Å–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç
                return
            }
            if let _ = self.tasksByVideoID[videoID] {
                self.bumpLRU(videoID)
                print("‚è≥ prefetch already running videoID=\(videoID)")
                return
            }

            self.enforceLRULimit()

            // –í–ê–ñ–ù–û: –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏
            let asset = AVURLAsset(url: url,
                                   options: [ "AVURLAssetHTTPHeaderFieldsKey": self.defaultHeaders ])

            // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç ‚Äî —á—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç –±—ã–ª –Ω–µ ¬´–∫–∞—à–µ–π¬ª
            let options: [String: Any] = [
                AVAssetDownloadTaskMinimumRequiredMediaBitrateKey: 100_000
            ]

            guard let task = self.session.makeAssetDownloadTask(
                asset: asset,
                assetTitle: "video-\(videoID)",
                assetArtworkData: nil,
                options: options
            ) else {
                print("‚ùå makeAssetDownloadTask failed videoID=\(videoID)")
                self.notCacheableIDs.insert(videoID)
                return
            }

            self.tasksByVideoID[videoID] = task
            self.targetsByTask[task.taskIdentifier] = max(1, targetSeconds)
            self.bumpLRU(videoID)

            print("‚û°Ô∏è prefetch start videoID=\(videoID) target‚âà\(Int(targetSeconds))s")
            self.gate.wait()
            task.resume()
        }
    }

    func localAsset(for url: URL) -> AVURLAsset {
        // –°–æ–∑–¥–∞—ë–º asset —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —á—Ç–æ–±—ã runtime –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ —Å–æ–≤–ø–∞–¥–∞–ª.
        AVURLAsset(url: url, options: [ "AVURLAssetHTTPHeaderFieldsKey": defaultHeaders ])
    }

    func prefetchedSeconds(for videoID: Int) -> Double {
        syncQ.sync { prefetchedByVideoID[videoID] ?? 0 }
    }

    func cachedVideoIDs() -> [Int] {
        syncQ.sync { prefetchedByVideoID.filter { $0.value > 0 }.map { $0.key } }
    }

    func cachedSummary() -> [Int: Double] {
        syncQ.sync { prefetchedByVideoID }
    }

    func isNotCacheable(videoID: Int) -> Bool {
        syncQ.sync { notCacheableIDs.contains(videoID) }
    }

    // MARK: - LRU helpers
    private func bumpLRU(_ videoID: Int) {
        if let idx = lruOrder.firstIndex(of: videoID) { lruOrder.remove(at: idx) }
        lruOrder.append(videoID)
    }

    private func enforceLRULimit() {
        while tasksByVideoID.count >= maxConcurrentDownloads, let old = lruOrder.first {
            print("üßπ cancel LRU prefetch videoID=\(old)")
            if let task = tasksByVideoID[old] { task.cancel() }
            tasksByVideoID.removeValue(forKey: old)
            lruOrder.removeFirst()
        }
    }
}

// MARK: - AVAssetDownloadDelegate
extension HLSDownloadManager: AVAssetDownloadDelegate {
    func urlSession(_ session: URLSession,
                    assetDownloadTask: AVAssetDownloadTask,
                    didLoad timeRange: CMTimeRange,
                    totalTimeRangesLoaded loadedTimeRanges: [NSValue],
                    timeRangeExpectedToLoad: CMTimeRange) {

        let loadedSeconds = loadedTimeRanges
            .map { ($0 as! CMTimeRange).duration.seconds }
            .reduce(0, +)

        let expectedSeconds = timeRangeExpectedToLoad.duration.seconds.isFinite
            ? timeRangeExpectedToLoad.duration.seconds
            : .greatestFiniteMagnitude

        let target = targetsByTask[assetDownloadTask.taskIdentifier] ?? 0
        let effectiveTarget = min(target, expectedSeconds)

        if loadedSeconds >= effectiveTarget {
            syncQ.async {
                if let pair = self.tasksByVideoID.first(where: { $0.value.taskIdentifier == assetDownloadTask.taskIdentifier }) {
                    self.prefetchedByVideoID[pair.key] = min(loadedSeconds, effectiveTarget)
                    print("‚úÖ prefetch done videoID=\(pair.key) ~\(Int(self.prefetchedByVideoID[pair.key]!))s")
                }
            }
            assetDownloadTask.cancel()
        }
    }

    func urlSession(_ session: URLSession,
                    task: URLSessionTask,
                    didCompleteWithError error: Error?) {
        syncQ.async {
            defer { self.gate.signal() }

            if let (videoID, _) = self.tasksByVideoID.first(where: { $0.value.taskIdentifier == task.taskIdentifier }) {
                self.tasksByVideoID.removeValue(forKey: videoID)
                if let idx = self.lruOrder.firstIndex(of: videoID) { self.lruOrder.remove(at: idx) }

                if let err = error as NSError? {
                    let cmCode = err.code
                    let reason: String
                    switch cmCode {
                    case -17913: reason = "CMFormat/unsupported for offline (code -17913)"
                    case -1:     reason = "CMError unknown (-1) ‚Äî —á–∞—Å—Ç–æ HLS/headers mismatch"
                    default:     reason = "error \(cmCode)"
                    }
                    print("‚ö†Ô∏è prefetch error videoID=\(videoID): \(reason)")
                    // –ï—Å–ª–∏ —Å–≤–∞–ª–∏–ª–æ—Å—å —Ä–∞–Ω–æ ‚Äî –±–æ–ª—å—à–µ –Ω–µ –º—É—á–∞–µ–º —ç—Ç–æ—Ç id
                    self.notCacheableIDs.insert(videoID)
                }
            }
            self.targetsByTask.removeValue(forKey: task.taskIdentifier)
        }
    }

    func urlSession(_ session: URLSession, didBecomeInvalidWithError error: Error?) {
        if let error { print("‚ùå HLS session invalid: \(error.localizedDescription)") }
    }
}
