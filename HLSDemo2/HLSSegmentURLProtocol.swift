//
//  HLSSegmentURLProtocol.swift
//  HLSDemo2
//
//  Updated by Niiaz Khasanov on 10/18/25
//

import Foundation

/// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç *.m3u8/*.ts/*.m4s/*.aac.
/// –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –µ—Å—Ç—å –≤ –∫—ç—à–µ ‚Äî –æ—Ç–¥–∞—ë–º –∏–∑ –¥–∏—Å–∫–∞; –∏–Ω–∞—á–µ ‚Äî –∫–∞—á–∞–µ–º –∏ –∫–ª–∞–¥—ë–º.
final class HLSSegmentURLProtocol: URLProtocol {
    private static let handledKey = "HLSSegmentURLProtocolHandled"
    private let store = HLSSegmentStore.shared
    private var dataTask: URLSessionDataTask?

    // ‚úÖ –û–¥–∏–Ω –æ–±—â–∏–π URLSession –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (keep-alive, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å –ø–ª–µ–µ—Ä–æ–º)
    private static let sharedSession: URLSession = {
        let cfg = URLSessionConfiguration.default
        cfg.httpMaximumConnectionsPerHost = 1   // –±—ã–ª–æ 4 ‚Äî –∑–∞–±–∏–≤–∞–ª–æ —Å–æ–∫–µ—Ç—ã –ø–ª–µ–µ—Ä—É
        cfg.timeoutIntervalForRequest = 20
        cfg.timeoutIntervalForResource = 60
        cfg.waitsForConnectivity = true
        cfg.httpAdditionalHeaders = [
            "User-Agent": "HLSDemo2/1.0 (iOS)",
            "Accept": "application/vnd.apple.mpegurl, application/x-mpegURL, */*"
        ]
        return URLSession(configuration: cfg)
    }()

    override class func canInit(with request: URLRequest) -> Bool {
        if URLProtocol.property(forKey: handledKey, in: request) as? Bool == true { return false }
        guard let url = request.url else { return false }
        switch url.pathExtension.lowercased() {
        case "ts", "m4s", "aac", "m3u8": return true
        default: return false
        }
    }

    override class func canonicalRequest(for request: URLRequest) -> URLRequest { request }

    override func startLoading() {
        guard let url = request.url else { return }

        // –ö–µ—à-—Ö–∏—Ç ‚Äî —Å—Ä–∞–∑—É –∏–∑ –¥–∏—Å–∫–∞
        if let data = store.read(url) {
            print("üìÄ URLProtocol serve from cache:", url.lastPathComponent)
            let mime: String
            switch url.pathExtension.lowercased() {
            case "m3u8": mime = "application/vnd.apple.mpegurl"
            case "ts":   mime = "video/MP2T"
            case "m4s":  mime = "video/iso.segment"
            case "aac":  mime = "audio/aac"
            default:     mime = "application/octet-stream"
            }
            let resp = HTTPURLResponse(url: url, statusCode: 200, httpVersion: "HTTP/1.1",
                                       headerFields: ["Content-Type": mime])!
            client?.urlProtocol(self, didReceive: resp, cacheStoragePolicy: .notAllowed)
            client?.urlProtocol(self, didLoad: data)
            client?.urlProtocolDidFinishLoading(self)
            return
        }

        // –ö–∞—á–∞–µ–º ¬´–Ω–∞ –ª–µ—Ç—É¬ª, –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è
        let mutableReq = (request as NSURLRequest).mutableCopy() as! NSMutableURLRequest
        URLProtocol.setProperty(true, forKey: HLSSegmentURLProtocol.handledKey, in: mutableReq)

        dataTask = HLSSegmentURLProtocol.sharedSession.dataTask(with: mutableReq as URLRequest) { [weak self] data, resp, err in
            guard let self else { return }
            if let resp = resp { self.client?.urlProtocol(self, didReceive: resp, cacheStoragePolicy: .notAllowed) }
            if let data = data {
                self.client?.urlProtocol(self, didLoad: data)
                self.store.write(data, for: url) // üíæ –ø–æ–ª–æ–∂–∏–ª–∏ –≤ –∫—ç—à
                print("üíæ cached on demand:", url.lastPathComponent)
            }
            if let err = err { self.client?.urlProtocol(self, didFailWithError: err) }
            else { self.client?.urlProtocolDidFinishLoading(self) }
        }
        dataTask?.priority = URLSessionTask.lowPriority  // —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        dataTask?.resume()
    }

    override func stopLoading() {
        dataTask?.cancel()
        dataTask = nil
    }
}
